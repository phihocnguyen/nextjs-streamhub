datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  password      String?
  role          UserRole       @default(USER)
  accounts      Account[]
  Post          Post[]
  Comment       Comment[]
  Story         Story[]
  Follower      Follower[]
  conversations Conversation[]
  seenMessages  Message[]      @relation("Seen")
  messages      Message[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Post {
  id         String    @id @default(cuid())
  date       DateTime
  image_path String?
  content    String?
  totalLike  Int       @default(0) @map("total_like")
  authorId   String    @map("author_id")
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isLiked    Boolean   @map("is_liked")
  Comment    Comment[]

  @@map("posts")
}

model Comment {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  postId  String @map("post_id")
  content String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Story {
  id       String   @id @default(cuid())
  userId   String   @map("user_id")
  dateTime DateTime @default(now())
  content  String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follower {
  id       String @id @default(cuid())
  userId   String @map("user_id")
  followId String @map("follower_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("followers")
}

model Conversation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?

  messages Message[]
  users    User[]
}

model Message {
  id           String         @id @default(cuid())
  body         String?
  createdAt    DateTime       @default(now())
  Conversation Conversation[]
  seen         User[]         @relation("Seen")
  sender       User?          @relation(fields: [senderId], references: [id])
  senderId     String?
}
